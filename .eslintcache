[{"/Users/frankmathy/devlocal/react-playground/superchat/src/index.js":"1","/Users/frankmathy/devlocal/react-playground/superchat/src/App.js":"2","/Users/frankmathy/devlocal/react-playground/superchat/src/reportWebVitals.js":"3"},{"size":500,"mtime":1609340696124,"results":"4","hashOfConfig":"5"},{"size":2834,"mtime":1609366257881,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":1609340696125,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"1mvckjj",{"filePath":"11","messages":"12","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"/Users/frankmathy/devlocal/react-playground/superchat/src/index.js",[],["16","17"],"/Users/frankmathy/devlocal/react-playground/superchat/src/App.js",["18"],"import './App.css';\n\nimport React, { useRef, useState } from 'react';\n\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\n\nif (!firebase.apps.length) {\n  firebase.initializeApp({\n    apiKey: 'AIzaSyD7oSntJO6QX6Q9RFMrSdZaZPj1lYVztyc',\n    authDomain: 'superchat-7e558.firebaseapp.com',\n    projectId: 'superchat-7e558',\n    storageBucket: 'superchat-7e558.appspot.com',\n    messagingSenderId: '618664323506',\n    appId: '1:618664323506:web:e6ad7fc900afcaeec59cab',\n    measurementId: 'G-EWPLV47E2X'\n  });\n}\n\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\n\nfunction App() {\n  const [user] = useAuthState(auth);\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Chat</h1>\n        <SignOut />\n      </header>\n      <section>{user ? <ChatRoom /> : <SignIn />}</section>\n    </div>\n  );\n}\n\nfunction SignIn() {\n  const signInWithGoogle = () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    auth.signInWithPopup(provider);\n  };\n\n  return <button onClick={signInWithGoogle}>Sign in with Google</button>;\n}\n\nfunction SignOut() {\n  return (\n    auth.currentUser && <button onClick={() => auth.signOut()}>Sign Out</button>\n  );\n}\n\nfunction ChatRoom() {\n  const dummy = useRef();\n\n  const messagesRef = firestore.collection('messages');\n  const query = messagesRef.orderBy('createdAt').limit(25);\n\n  const [messages] = useCollectionData(query, { idField: 'id' });\n  const [formValue, setFormValue] = useState('');\n\n  const sendMessage = async e => {\n    e.preventDefault();\n    const { uid, photoURL } = auth.currentUser;\n    await messagesRef.add({\n      text: formValue,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      uid,\n      photoURL\n    });\n    setFormValue('');\n    dummy.current.scrollIntoView({ behaviour: 'smooth' });\n  };\n\n  return (\n    <>\n      <main>\n        {messages &&\n          messages.map(msg => <ChatMessage key={msg.id} message={msg} />)}\n        <span ref={dummy}></span>\n      </main>\n      <form onSubmit={sendMessage}>\n        <input\n          value={formValue}\n          onChange={e => setFormValue(e.target.value)}\n          placeholder=\"Message\"\n        />\n        <button type=\"submit\" disabled={!formValue}>\n          Send\n        </button>\n      </form>\n    </>\n  );\n}\n\nfunction ChatMessage(props) {\n  const { text, uid, photoURL } = props.message;\n  const messageClass = uid === auth.currentUser.uid ? 'sent' : 'received';\n  return (\n    <div className={`message ${messageClass}`}>\n      <img\n        src={\n          photoURL || 'https://api.adorable.io/avatars/23/abott@adorable.png'\n        }\n      />\n      <p>{text}</p>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/frankmathy/devlocal/react-playground/superchat/src/reportWebVitals.js",[],{"ruleId":"19","replacedBy":"20"},{"ruleId":"21","replacedBy":"22"},{"ruleId":"23","severity":1,"message":"24","line":104,"column":7,"nodeType":"25","endLine":108,"endColumn":9},"no-native-reassign",["26"],"no-negated-in-lhs",["27"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]